#include <stdio.h>
#include <stdlib.h>


struct Queue {
    int front, rear, size;
    unsigned capacity;
    int* array;
};


struct Queue* createQueue(unsigned capacity) {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = queue->size = 0;
    queue->rear = capacity - 1;
    queue->array = (int*)malloc(queue->capacity * sizeof(int));
    return queue;
}

int isQueueFull(struct Queue* queue) {
    return queue->size == queue->capacity;
}


int isQueueEmpty(struct Queue* queue) {
    return queue->size == 0;
}


void enqueue(struct Queue* queue, int item) {
    if (isQueueFull(queue))
        return;

    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    queue->size++;
}


int dequeue(struct Queue* queue) {
    if (isQueueEmpty(queue))
        return -1;

    int item = queue->array[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size--;
    return item;
}


struct Stack {
    struct Queue* q1;
    struct Queue* q2;
};


struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->q1 = createQueue(capacity);
    stack->q2 = createQueue(capacity);
    return stack;
}


void push(struct Stack* stack, int item) {
    enqueue(stack->q1, item);
}


int pop(struct Stack* stack) {
    if (isQueueEmpty(stack->q1))
        return -1;

    while (stack->q1->size > 1) {
        enqueue(stack->q2, dequeue(stack->q1));
    }

    int item = dequeue(stack->q1);

    struct Queue* temp = stack->q1;
    stack->q1 = stack->q2;
    stack->q2 = temp;

    return item;
}

int main() {
		printf("name : Yashwanth \n");
	printf("regno : 192210563\n");
    struct Stack* stack = createStack(5);

    push(stack, 10);
    push(stack, 20);
    push(stack, 30);

    printf("Popped element: %d\n", pop(stack));
    printf("Popped element: %d\n", pop(stack));

    push(stack, 40);

    printf("Popped element: %d\n", pop(stack));

    return 0;
}
